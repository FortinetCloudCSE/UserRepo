var relearn_search_index=[{content:`Task 1 - Hugo Build When you’re satisfied with Hugo view of your content in Hugo virtual server, issue a Hugo ‘build’ in the container CLI
hugo --minify This command “builds” your Hugo site into the container’s /public folder. We used a docker disk mount to map this folder back to your local /docs folder, so the Hugo website will automatically be copied back into your local repo You can now exit the container with ctrl + cd, or command: ’exit’ When you exit the container, any changes you made to the container will be lost and cannot be recovered Remember we edited the /content folder on our local OS, so those changes were not made to the container and will not be lost Further, the disk mount from local’s /docs to Container’s public AUTOMATICALLY writes the hugo build to your local OS, so those changes will not be lost If you need to continue editing, just run a new container from your built image, and run hugo’s webserver. Everything is linked properly so it should just work `,description:"",tags:null,title:"Build Hugo page",uri:"/03chapter3/2_task1.html"},{content:` Warning testing some things 2 Welcome! This site, hosted on GitHub Pages, will explain how to use the Hugo Web Framework \u0026 the “reLearn” Theme to effectively organize \u0026 deliver Fortinet TEC Workshops \u0026 Product demos in a consistent, simple, and visually appealing format.
The beauty of this framework lies in its simplicity. Within approx 30 mins, anybody can have a site up and running. Content is created via Markdown files, and the workshop guide layout is simply a directory structure.
Follow along on this simple tutorial to get up and running with a Hugo formatted site for your TEC Workshop/training/demo content today!
Learning Objectives Setup hugo on your system and clone this repo for re-usable starting point Customize the Hugo content folder to display proper information flow for your TEC Workshop/demo/training Publish your Hugo site to GitHub pages via a CI/CD model (GitHub action will automatically re-build your Hugo content whenever you push to the underlying repo) About Hugo and Fortinet TECWorkshops `,description:"",tags:null,title:"Fortinet TECWorkshop Template - MVP1",uri:"/index.html"},{content:`Task 1 - Create a Folder structure correlating to the major topics/sections of the demonstration Browse to the content directory within your TECWorkshop repo (Locally on your machine) The Left Hand navigation menu is driven by the folder structure you create Chapters are ordered according to the number prefix on the folder Folder Naming doesn’t appear on the published site, it only helps the content creator organize the chapters \u0026 remember what’s in each Chapter Within each folder there is an _index.md file which is used to create the content of the Chapter header page The _index.md is used to
title the Chapter header page in left hand navigation display chapter introduction content on the chapter heading page Notice the folder structure and file naming on the left and the resulting display on the right Info Note that the file and folder names only matter for ordering. Lower numbered folders will appear first. Only the “title” tags within each Markdown file will impact the resulting page view Subsequent Markdown pages under each folder are used to explain tasks/steps within each chapter `,description:"",tags:null,title:"Task 1 - Chapter Directory Structure",uri:"/02chapter2/2_task1.html"},{content:`Task 1 - Create Repo - Request a new repo for your TECWorkshop (this will be referred to as your UserRepo)
Send an email to fortinetcloudcse@fortinet.com to request a new GitHub repo and Jenkins Pipeline. Providing the following: Repo Name GitHub Usernames of collaborators Behind the scenes, a script is used to create your TECWorkshop repo with appropriate protections and features. Additionally a Jenkins pipeline will be setup to monitor changes to the repo and run things like publishing the web site FortiDevSec scanning You will use this repo to create and modify MD chapters \u0026 tasks to create your workshop Guide in Hugo format Help with Git is included below This script will:
Create a new repo in FortinetCloudCSE from the Parent Template DemoFrontEndDocker Add specified GitHub collaborators to the newly created Repo Create a Jenkins job for the repo and run initial build. This job can/will do things like linting Directory governance FortiDevSec scans Git repo setup Once your TECWorkshop repo is created, clone the repo and change your working directory to the cloned repo git clone \u003cprovided link\u003e cd \u003ccloned repo directory\u003e additional Git Tips are available here MVP0 (LEGACY STEPS only do this if MVP1 steps don’t work) Info You won’t be able to clone this repo into the FortinetCloudCSE Org, so using this route, you’ll have to clone to your own repo Task 1 - Clone this sample repo ** Prerequisite ** - Ensure Git is installted on your system
Step 1 Clone this git repo git clone https://github.com/FortinetCloudCSE/UserRepo.git `,description:"",tags:null,title:"Task 1 - Repo Creation",uri:"/01gettingstarted/2_task1.html"},{content:`Task 2 - create or copy Markdown pages for each task within the chapter Each Chapter can have 1 or more tasks which should be completed by the participants Naming of the task Markdown pages doesn’t matter, and is only used to aid the content author in organizing the content. Info Note that the filename doesn’t matter other than to help organize content. The Title and Weight dictate the leftnav visual and ordering of the pages. Lower weight pages are displayed first Warning Because the file and folder names are very similar in our example repo, it can become confusing to know where to make edits. Make sure you’re editing the correct file in your IDE/editor This page contains several useful markdown shortcodes you can use for visual pop-outs on the the site Lots of shortcodes \u0026 Features available here Badges:
Important Version6.6.6 Captain InfoNew Awesome
Icons:
⭐ Tips this is a star 💡 this is a lightbulb Notices
Note Make sure you use the –recurse-submodules tag so that you get all the underlying resources that allow the framework to operate properly Tip this is a tip box Info this is a tip box Warning The examples and sample code provided in this workshop are intended to be consumed as instructional content. These will help you understand how various Fortinet and Azure services can be architected to build a solution while demonstrating best practices along the way. These examples are not intended for use in production environments without full understanding of how they operate. Expandable sections":
Expand me… Thank you! Buttons:
Get Hugo Get Hugo Mermaid (diagrams \u0026 charts):
graph LR; If --\u003e Then Then --\u003e Else %%{init:{"theme":"forest"}}%% graph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{\u003cstrong\u003eDecision\u003c/strong\u003e} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] %%{init:{"fontFamily":"monospace", "sequence":{"showSequenceNumbers":true}}}%% sequenceDiagram Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! `,description:"",tags:null,title:"Task 2 - Create/Modify MD pages",uri:"/02chapter2/3_task2.html"},{content:`Task 2 - Push your content to GitHubo repo Finally, from your local workstation CLI, push the newly created Hugo site up to GitHub to automatically publish your Hugo Site
git add . git commit -m "\u003cmy commit message\u003e" git push Remember we’re always working in a Git Branch, so we’ll need to issue a Pull request and merge using this procedure `,description:"",tags:null,title:"Task 2 - Push content to your repo",uri:"/03chapter3/3_task2.html"},{content:"Task 2 - Adjust the Site’s Frontmatter in config.toml file Note Config.toml must be modified for each new repo as it controls overall parameters for the site Open the config.toml file under the repo root to change a few parameters of the site Edit the baseUrl to match the GitHub Page for your site (you only need to update the directory after / and it will match your TECWorkshop reop name) Add information URL’s to the bottom of the leftnav bar with [[menu.shortcuts]] menu.shortcuts are displayed lowest to highest according to their weight Additional customizations can be made with themeVariants, so email fortinetcloudcse@fortinet.com to request global site changes ",description:"",tags:null,title:"Task 3 - Adjust config.toml site settings",uri:"/02chapter2/4_task3.html"},{content:"Task 4: Image Storage Option 1: use externally fully qualified absolutely path (this can be a pain) Option 2: if you have a directory with all your images…. put it in “/content/images” MD usage(from a chapter page in “content/chapter01”): Option 3: I find it easier to organize images with the pages they go with (this is how the template repo is setup put images in the chapter directory 1	e.g. images in “/content/chapter1/” 2	MD Usage (venv) jkopko@jkopko-mac content % tree . ├── 01GettingStarted │ ├── 2_Task1.md │ ├── ContainerBuild.md │ ├── ContainerRun.md │ ├── LocalHugoInstall.md │ ├── _index.md │ └── hugoServer.jpg ├── 02Chapter2 │ ├── 2_Task1.md │ ├── 3_Task2.md │ ├── 4_Task3.md │ ├── _index.md │ ├── chapterIndex.png │ ├── config.png │ ├── images.md │ └── taskPage.png ├── 03Chapter3 │ ├── 2_Task1.md │ ├── 3_Task2.md │ ├── GitHubActions.md │ ├── Gittips.md │ ├── _index.md │ ├── actionsReview.png │ ├── hugoCommit.png │ ├── hugoCommitNewFile.png │ ├── img.png │ ├── pages-browseWorkflows.png │ ├── pages-deployAction.png │ ├── pages-workflowHugo.png │ ├── repoFolders.png │ ├── repoPages.png │ └── repoSettings.png └── _index.md ",description:"",tags:null,title:"Task 4 - image storage",uri:"/02chapter2/images.html"},{content:`GitHub Repo Getting Started (General Workflow for GitHub Repos) Once your repo and pipeline have been created, you will be provided with the GitHub repo link which you can use to clone and begin content creation. First, navigate to a desired local directory and clone the repo with the provided link: cd \u003cdesired parent directory\u003e git clone \u003cprovided link\u003e cd \u003ccloned repo directory\u003e Create a feature branch to begin working on your desired changes. git checkout -b \u003cFEATURE-username-ShortDescr\u003e Check the repo status to verify the changes to be staged. git status Stage the desired files (or issue -A (or .) for all), commit, and push. git add -A {or} git add . git commit -m "\u003cadd a commit message here\u003e" git push If this is your first push to the branch, GitHub upstream doesn’t know about it. Just go ahead and use the provided command in this case to perform the push, which will create the upstream branch
To auto create new branches when you first push, update Git global config git config --global --add --bool push.autoSetupRemote true Tip: An easy way to squash your commits is to perform a soft reset:
git reset --soft \u003chash of the last commit you want to keep as is\u003e git add -A git commit -m "\u003cnew commit message\u003e" git log You will see the new commit on top of the one you referenced in the git reset command.
When you have completed your work and are ready to merge your changes into the main branch, perform an interactive rebase and force push to your branch. git rebase -i On the first screen, you may want to leave the top commit as is, and for the rest, replace the word ‘pick’ with an ’s’ for squash. Then, on the next screen, comment out the commit messages you don’t want, leaving the preferred one as is. Once your PR is approved, checkout the main branch and perform a fast-forward merge and force push to complete the workflow.
git checkout main git merge \u003cfeature branch name\u003e --ff-only git push --force `,description:"",tags:null,title:"- Create GitHub action for Hugo Publish",uri:"/03chapter3/gittips.html"},{content:`Task 2 Build a FortinetHugo container this is a 1 time action, only necessary the first time you create a repo Info The container is built with your GitHub SSH keys, so depending on your OS and how you created the keys, the arguments below may change. Usually, the key files are named with either id_ed25519 OR id_rsa
Warning Container name in the example below MUST be lowercase only Tip The Full commands and explanation for building and running docker are listed below. We’ve also included a shell script in this repo to run the commands
- MacOS/using ed25519 keys ./scripts/docker_cmd_ed25519.sh - using RSA keys: /scripts/docker_cmd_rsa.sh
docker build -t fortinet-hugo \\ --build-arg ssh_prv_key="$(cat ~/.ssh/id_ed25519)" \\ --build-arg ssh_pub_key="$(cat ~/.ssh/id_ed25519.pub)" \\ -f DockerfileContentCreation . The container image is a point-in-time Ubuntu OS including s a Hugo installation and cloned CentralRepo so your Hugo formatting/themes/branding will always be up-to-date CentralRepo contains necessary files, directories, and Fortinet-specific customizations to configure Hugo, it won’t change often If you would prefer local Hugo install/development follow these directions Container advantages: no need to install/maintain Hugo locally no need to clone/maintain Hugo “supporting files/directories”….your repo will be much larger and will get out-of-date quickly same container can be used to preview and build EVERY TECWorkshop, and you could build/move it anywhere no need to rename/modify Hugo’s public folder after builds `,description:"",tags:null,title:"Task 2 - Container build",uri:"/01gettingstarted/containerbuild.html"},{content:`Task 3: Run FortinetHugo container Info If you used the scripts to build and run container from last step, your container is already running Run the container with local disk mounts so you review your markdown TECWorkshop Guide as you’re creating the content (repeat this procedure for any TECWorkshop you’re creating)
docker run --rm -it -v $(pwd)/content/:/home/CentralRepo/content -v $(pwd)/config.toml:/home/CentralRepo/config.toml -v $(pwd)/docs:/home/CentralRepo/public -p 1313:1313 fortinet-hugo:latest ‘-rm’ flag removes the container after it’s closed…freeing up resources ‘-it’ flag provides an interactive prompt into the Container ‘-v’ flag creates a disk mount to the local file system available within the container OS ‘-p’ publishes container ports to the local OS (used to view the local Hugo Webserver) the above command runs the container and logs you into the container Ubuntu OS CLI (most Linux commands will work)
Refresh any updates from CentralRepo, note the $(pwd) in Container OS, and list files,
git pull -r pwd ls -la Info If your hugo website doesn’t have the Fortinet logo or the proper colors, it’s likely b/c you haven’t refreshed the CentralRepo content with git pull -r
Run Hugo virtual server to get a live view of Hugo’s output
hugo server --bind 0.0.0.0 In your local machine, browse to http://localhost:1313/UserRepo
`,description:"",tags:null,title:"Task 3 - Run Container",uri:"/01gettingstarted/containerrun.html"},{content:`Chapter 1 - Setting up your Hugo environment (15 min) Prereqs Docker GitHub keys Follow the instructions here to generate a new SSH key pair Warning DO NOT USE A PASSPHRASE when you create the keys Once created follow these directions to add the newly created Key to your GitHub account. What is Hugo and how easy can this be? Generally, this section follows the example set forth here
Click the right arrow in top navbar to go through each step individually
`,description:"",tags:null,title:"Ch 1 Getting Started with Repos and Containers",uri:"/01gettingstarted.html"},{content:` Tip Hugo is installed on the container so it’s best to use it there. These instructions are included for legacy learning purposes Hugo Local install If you’re using a Mac, run the following brew install from your terminal
brew install hugo If you’re using Windows, install chocolatey for windows (follow directions here). Once installed run the following
choco install hugo -confirm Run Hugo webserver locally to see a local version of the rendered website From within the root of the repo you copied onto your system
hugo server Click on the URL presented after the above command finishes to view a local version of your first Hugo formatted website
Warning The examples and sample code provided in this workshop are intended to be consumed as instructional content. These will help you understand how various Fortinet and Azure services can be architected to build a solution while demonstrating best practices along the way. These examples are not intended for use in production environments without full understanding of how they operate. `,description:"",tags:null,title:"Optional - Install Hugo",uri:"/01gettingstarted/localhugoinstall.html"},{content:`Learn to organize and create content in Hugo- estimated duration 20min You now have a container running hugo webserver and tracking changes to the /content directory in your repo.
Create your TecWorkshop Guide including Chapers and tasks. You can use your favorite editor/IDE to create the markdown pages Depending on several factors, you may or may not see LIVE changes to the http://localhost:1313/UserRepo page If you’re not seeing live changes… re-run hugo server command on container (ctrl+C to end the running hugo process on container CLI) Note You will ultimately need to make a minor change to the config.toml file in this repo, and when you do, the Hugo Local Webserver directory will change to the name of your repo With your FortinetHugo Container running, you can proceed to creating and editing your demonstration content.
Hugo is incredibly powerful and allows many customizations, and we won’t cover most of theme here as they’ve already been set for Fortinet’s standard template
Generally, you only need to do 3 things:
Set the folder structure for left hand menu bar navigation/topic structure, according to your chapters and tasks Create Markdown files for each Chapter and and discrete Task task therein Adjust the site’s frontmatter settings via config.toml to reflect your TECWorkshop repo name Click the right arrow to go through each step individually
`,description:"",tags:null,title:"Ch 2 Hugo Content Structure",uri:"/02chapter2.html"},{content:`Publish your content to GitHub pages via a GitHub action Now that you have your content first draft, push your repo to github, there’s already a GitHub action to automatically publish your content anytime you upload to the repo
Click the right arrow to go through each step individually
`,description:"",tags:null,title:"Ch 3 - Hugo Publish ",uri:"/03chapter3.html"},{content:'Task 3 - Create GitHub action for Hugo Publish Warning You must have proper repo permissions to setup a GitHub action. If you do not see the settings button on the top repo banner/ribbon, please reach out to the repo owner to get the proper permissions In your web browser, navigate to the GitHub repo and click on Settings in the top ribbon On the left hand nav bar, click on Pages Under Source select GitHub Actions Click Browse All Workflows Search for Hugo and then click Configure under the Hugo GitHub Actions You’ll see a hugo.yml file created, which directs GitHubActions to execute a Hugo Build Command anytime the repo is updated. We need to make 1 minor adjustment to this file. B/c we located our hugo content underneath the repo root, we need to tell hugo where it needs to build and publish. Once updated per your folder naming in the spots shown below, click Start Commit Specifically, you want to add a working-directory under the jobs: –\u003e build: –\u003e steps: section and then update the Upload Artifact path. You can copy and paste this entire script into your hugo.yml file, or just edit the specific lines for working directory (in the bottom 1/3 of the file)\n# Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: ["main"] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow one concurrent deployment concurrency: group: "pages" cancel-in-progress: true # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.108.0 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026\u0026 sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Install Dart Sass Embedded run: sudo snap install dart-sass-embedded - name: Checkout uses: actions/checkout@v3 with: submodules: recursive - name: Setup Pages id: pages uses: actions/configure-pages@v2 - name: Install Node.js dependencies run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026\u0026 npm ci || true" - name: Build with Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo \\ --minify \\ --baseURL "${{ steps.pages.outputs.base_url }}/" working-directory: ./hugeowebfront - name: Upload artifact uses: actions/upload-pages-artifact@v1 with: path: ./hugeowebfront/public # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v1 7. Click to Commit new file 8. You’ll see the new GitHub action file hugo.yml created in the .github/workflows folder of the repo. You can review the action to see results of the build ',description:"",tags:null,title:"Task 3 - Create GitHub action for Hugo Publish",uri:"/03chapter3/githubactions.html"},{content:"",description:"",tags:null,title:"Categories",uri:"/categories.html"},{content:"",description:"",tags:null,title:"Tags",uri:"/tags.html"}]